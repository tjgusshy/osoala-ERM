Fve`
use master

drop database OSOLAOLTP

--Creating a replica of Osola Grocery OLTP environment 
IF not exists(select name from sys.databases where name ='OSOLAOLTP')
	Create database OSOLAOLTP
	else
	print('Database Already Exists')

use OSOLAOLTP
	
select * from Product
select * from Department


select p.ProductID,d.Department,p.Product,p.ProductNumber,p.UnitPrice  from Product p
left join Department d on p.DepartmentID=d.DepartmentID


select * from ProductDenormalized


--Creating Osola Staging environment
IF not exists(select name from sys.databases where name ='OSOLAStaging')
	Create database OSOLAStaging
	else
	print('Database Already Exists')

use OSOLAStaging

	Create database OSOLAStaging

--Creating schema(helps organize tables within the database) for Osola Staging environment

	create schema stg

--Creating Osola EDW
IF not exists(select name from sys.databases where name ='JULY2023edw')
	Create database JULY2023edw
	else
	print('Database Already Exists')

--Creating schema(helps organize tables within the database) for Osola EDW environment

	create schema EDW



--Creating Osola Control DB
IF not exists(select name from sys.databases where name ='JULY2023Control')
	Create database JULY2023Control
	else
	print('Database Already Exists')
	
	create schema ctl

----- Date Dimension (date,Day,month, Quater,Year,EnglishMonth,EnglishdayofWeek,FrenchMonth,FrenchDayofweek)

use JULY2023edw


create table EDW.DimDate
	(
		Datesk int,
		BusinessDate date,
		BusinessDay int,
		BusinessQuater nvarchar(2),
		BusinessMonth int,
		Businessyear int,
		EnglishMonth nvarchar(50),
		EnglishdayofWeek nvarchar(50),
		FrenchMonth nvarchar(50),
		FrenchDayofweek nvarchar(50),
		Loaddate datetime default getdate(),
		constraint Edw_Dimdate_sk primary key(datesk)
	)
	
Create or Alter Procedure EDW.DImDateGenerator(@enddate date = '2120-12-31' )
AS
BEGIN
SET NOCOUNT ON

IF (select object_id('EDW.DimDate')) is not Null
 Truncate table EDW.DimDate
	
	declare @noofday int
	declare @Startdate date = (
							select min(transdate) from
							(
							select min(transdate) transdate from osolaoltp.dbo.PurchaseTransaction
							union all
							select min(transdate) from osolaoltp.dbo.SalesTransaction
							) a
							)
	
	select  @noofday = Datediff(day,@startdate,@endDate)
	declare @currentday int =0
	declare @currentdate date
	while @currentday <= @noofday
	Begin
	 select @currentdate = DATEADD(day,@currentday,@startdate)
	  insert into EDW.DimDate (Datesk,BusinessDate,BusinessDay,BusinessQuater,BusinessMonth,Businessyear,EnglishMonth,EnglishdayofWeek,FrenchMonth,FrenchDayofweek)
	  select (convert(nvarchar(8),@currentdate,112)),@currentdate,Datepart(day,@currentdate),'Q' + Cast(Datepart(Q,@currentdate) as nvarchar),month(@currentdate),
			 year(@currentdate),Datename(month,@currentdate),Datename(weekday,@currentdate),
			 case month(@currentdate)
			 when 1 then 'Janvier' when 2 then 'Février'  when 3 then 'Mars'  when 4 then 'Avril'  when 5 then 'Mai'  when 6 then 'Juin'  when 7 then 'Juillet'
			 when 8 then 'Août' when 9 then 'Septembre' when 10 then 'Octobre' when 11 then 'Novembre' when 12 then 'Décembre'
			 END,
			 case  Datepart(weekday,@currentdate)
			 when 2 then 'Lundi'  when 1 then 'Dimanche'  when 3 then 'Mardi' when 4 then 'Mecredi'  when 5 then 'Jeudi' when 6 then 'Vendredi' when 7 then 'Samedi' END

	 select  @currentday = @currentday+1
	End
END


EXEC Edw.dimdategeneratoR '2090-12-31'

	select * from EDW.dimdate

	select datepart(month,getdate())


	---tIME dIMENSION-- (Timesk (auto generate uning idntity key)
	
	--0 to 23  hours in day

	-- Businehours ---> 0 to 7 - Closed,  8 to 17 open, 18 t0 23 closed 
	---- period of Day --->  00:00 to 00:59 -Midnight btween 1 to 4 Early Morning  btw 5 to 11 Morning  12 (noon) afternoon is btwen 13 tp 17 ,Evening 18 to 21 ,22 to 23 late evening

	Use JULY2023edw

	create Table EDW.DimTime
	(
	TimeSk int identity(1,1),  --this is autogenerated no need to insert
	TimeHour int,  ---o to 23
	Timeinterval nvarchar(20) not null, --- 00:00-00:59, 01:00-01:59
	BusinessHour nvarchar(20),
	PeriodofDay nvarchar(20),
	LoadDate datetime default getdate(),
	Constraint EDw_dimtime_sk primary key (timesk)
	)



  --select * from dimtime
		Create or Alter Procedure DImTimeGenerator 
		as 
BEGIN
		set nocount on 

		Truncate table  EDW.DimTime
		declare @Timehour int = 0
		while @TimeHour <=23
	Begin		
		
		insert into  EDW.DimTime(TimeHour,TimeInterval,BusinessHour,periodofDay)
		select
		@TimeHour,Right(concat('0',@timehour),2) +':00-' + Right(concat('0',@timehour),2) + ':59',
				   case
				    when @TimeHour between 8 and 17 then 'open'
					else 'closed' end,
case
					when @TimeHour = 0 then 'Midnight'
					when @TimeHour between 1 and 4 then 'Early Morning'
					when @TimeHour between 5 and 11 then 'Morning'
					when @TimeHour = 12  then 'Noon'
					when @TimeHour between 13 and 17 then 'Afternoon'
					when @TimeHour between 18 and 21 then 'Evening'
					when @TimeHour between 22 and 23 then 'Late Evening'
					end 

					select @TimeHour = @TimeHour+1
					
	End
END
					select * from EDw.DimTime

					execute DImTimeGenerator

	
	---diMprODUCT

	Use OSOLAOLTP

	select * from Product
	select * from Department

	select p.ProductID,p.Product,p.ProductNumber,p.UnitPrice,d.department from Product p
	inner join Department d on p.departmentID=d.DepartmentID

	select count(*) SourceCount from Product p
	inner join Department d on p.departmentID=d.DepartmentID



	--product staging----

	use OSOLAStaging

	Drop table stg.Product

	Create table stg.DimProduct
	(
		ProductID int,
		Product nvarchar(50),
		ProductNumber nvarchar(50),
		UnitPrice float,
		Department nvarchar(50),
		LoadDate Datetime	default getdate(),
		Constraint stg_product_pk primary key(productid)
	)

	truncate table stg.DimProduct

	select count(*) DesCount  from stg.DimProduct
	---Product EDW

	Use OSOLAStaging

	select productid,product,productnumber,UnitPrice,Department  from stg.DimProduct

	select count(*) CurrentCount  from stg.DimProduct

	Use JULY2023edw

	create table EDW.DimProduct
	(
		Productsk int identity(1,1),
		ProductID int,
		Product nvarchar(50),
		ProductNumber nvarchar(50),
		UnitPrice float,
		Department nvarchar(50),
		EffectiveStartdate datetime ,
		EffectiveEndDate datetime,
		constraint Edw_product_pk primary key(Productsk)
	)

	select count(*) PreCount from EDW.DimProduct
	select count(*) PostCount  from EDW.DimProduct
	
	---diMpromoton

	Use OSOLAOLTP

	select * from Promotion
	select * from PromotionType

	select p.PromotionID,pt.Promotion,p.StartDate,p.EndDate,p.DiscountPercent from Promotion p
	inner join PromotionType pt on p.PromotionTypeID=pt.PromotionTypeID

	select count(*) SourceCount from Promotion p
	inner join PromotionType pt on p.PromotionTypeID=pt.PromotionTypeID



	--promotion staging----

	use OSOLAStaging


	Create table stg.DimPromotion
	(
		PromotionID int,
		Promotion nvarchar(50),
		StartDate Date,
		EndDate Date,
		DiscountPercent float,
		LoadDate Datetime	default getdate(),
		Constraint stg_promotion_pk primary key(PromotionID)
	)

	truncate table stg.DimPromotion

	select count(*) DesCount  from stg.DimPromotion

	---Promotion EDW

	Use OSOLAStaging

	select  PromotionID, Promotion, EndDate, DiscountPercent,StartDate,EndDate from stg.DimPromotion

	select count(*) CurrentCount  from stg.DimPromotion

	Use JULY2023edw

	create table EDW.DimPromotion
	(
		Promotionsk int identity(1,1),
		PromotionID int,
		Promotion nvarchar(50),
		StartDate Date,
		EndDate Date,
		DiscountPercent float,
		EffectiveStartdate datetime ,
		constraint Edw_promotion_pk primary key(Promotionsk)
	)

	select count(*) PreCount from EDW.DimPromotion
	select count(*) PostCount  from EDW.DimPromotion

---DIm Store
use OSOLAOLTP

select * from store
select * from City
select * from state

select s.StoreID,s.StoreName,s.StreetAddress,c.CityName,st.State from Store s
inner join City c on s.CityID=c.CityID
inner join state st on c.StateID=st.StateID

select count(*) SourceCount from Store s
inner join City c on s.CityID=c.CityID
inner join state st on c.StateID=st.StateID

--StoreStaging
	Use OSOLAStaging

	 Create table stg.DimStore
	 (
		StoreID int,
		StoreNAme nvarchar(50),
		StreetAddress nvarchar(250),
		CityName nvarchar(50),
		State nvarchar(50),
		LoadDate Datetime default getdate(),
		constraint stg_store_pk primary key(StoreID)
	 )

	 Truncate table stg.DimStore

	 select count(*) DesCount from stg.DimStore

	 ---EDW Store

	Select StoreID,StoreNAme,StreetAddress,CityName,state from stg.DimStore

	Select Count(*) CurrentCount from stg.DimStore
	
	Use JULY2023edw

	Create table EDW.DimStore
	(
		Storesk int identity(1,1),
		StoreID int,
		StoreNAme nvarchar(50),
		StreetAddress nvarchar(250),
		CityName nvarchar(50),
		State nvarchar(50),
		EffectivestartDate datetime,
		constraint Edw_store_pk primary key(Storesk)
	)

	select count(*) PreCount from EDW.DimStore
	select count(*) PostCount from EDW.DimStore

----DimCustomer

use OSOLAOLTP

select * from customer
select * from City
select * from state

select cs.CustomerID, upper(cs.LastName) +','+cs.FirstName Customer,cs.CustomerAddress,c.CityName,st.State from Customer cs
inner join City c on cs.CityID=c.CityID
inner join state st on c.StateID=st.StateID

select Count(*) SourceCount from Customer cs
inner join City c on cs.CityID=c.CityID
inner join state st on c.StateID=st.StateID

--Customer Staging
	Use OSOLAStaging

	 Create table stg.DimCustomer
	 (
		CustomerID int,
		Customer nvarchar(250),
		CustomerAddress nvarchar(250),
		CityName nvarchar(50),
		State nvarchar(50),
		LoadDate Datetime default getdate(),
		constraint stg_customer_pk primary key(CustomerID)
	 )

	 Truncate table stg.DimCustomer

	 select count(*) DesCount from stg.DimCustomer

	 ---EDW Customer

	Select CustomerID,customer,CustomerAddress,CityName,state from stg.DimCustomer

	Select Count(*) CurrentCount from stg.DimCustomer
	
	Use JULY2023edw

	Create table EDW.DimCustomer
	(
		Customersk int identity(1,1),
		CustomerID int,
		Customer nvarchar(250),
		CustomerAddress nvarchar(250),
		CityName nvarchar(50),
		State nvarchar(50),
		EffectivestartDate datetime,
		constraint Edw_customer_pk primary key(Customersk)
	)

	select count(*) PreCount from EDW.DimCustomer
	select count(*) PostCount from EDW.DimCustomer




		
	---diMPosCahnnel

	Use OSOLAOLTP

	select ChannelID,ChannelNo,DeviceModel,SerialNo,InstallationDate from POSChannel
	

	select Count(*) SourceCount from POSChannel


	--Channel staging----

	use OSOLAStaging



	Create table stg.DimPosChannel
	(
		ChannelID int,
		ChannelNo nvarchar(50),
		DeviceModel nvarchar(50),
		SerialNo nvarchar(255),
		InstallationDate date,
		LoadDate Datetime	default getdate(),
		Constraint stg_posChannel_pk primary key(ChannelID)
	)

	truncate table stg.DimPosChannel

	select count(*) DesCount  from stg.DimPosChannel
	-- Pos Channel EDW

	Use OSOLAStaging

	select ChannelID,ChannelNo,DeviceModel,SerialNo,InstallationDate from  stg.DimPosChannel

	select count(*) CurrentCount  from stg.DimPosChannel

	Use JULY2023edw


	Alter table EDW.DimPosChannel 
	Alter Column SerialNo nvarchar(55)

	create table EDW.DimPosChannel
	(
		Channelsk int identity(1,1),
		ChannelID int,
		ChannelNo nvarchar(50),
		DeviceModel nvarchar(50),
		SerialNo float,
		InstallationDate date,
		EffectiveStartdate datetime ,
		EffectiveEndDate datetime,
		constraint Edw_poschannel_pk primary key(Channelsk)
	)

	select count(*) PreCount from EDW.DimPosChannel
	select count(*) PostCount  from EDW.DimPosChannel


		
	---diMPosCahnnel

	Use OSOLAOLTP

	select ChannelID,ChannelNo,DeviceModel,SerialNo,InstallationDate from POSChannel
	

	select Count(*) SourceCount from POSChannel


	--Channel staging----

	use OSOLAStaging



	Create table stg.DimPosChannel
	(
		ChannelID int,
		ChannelNo nvarchar(50),
		DeviceModel nvarchar(50),
		SerialNo float,
		InstallationDate date,
		LoadDate Datetime	default getdate(),
		Constraint stg_posChannel_pk primary key(ChannelID)
	)

	truncate table stg.DimPosChannel

	select count(*) DesCount  from stg.DimPosChannel
	-- Pos Channel EDW

	Use OSOLAStaging

	select ChannelID,ChannelNo,DeviceModel,SerialNo,InstallationDate from  stg.DimPosChannel

	select count(*) CurrentCount  from stg.DimPosChannel

	Use JULY2023edw

	create table EDW.DimPosChannel
	(
		Channelsk int identity(1,1),
		ChannelID int,
		ChannelNo nvarchar(50),
		DeviceModel nvarchar(50),
		SerialNo float,
		InstallationDate date,
		EffectiveStartdate datetime ,
		EffectiveEndDate datetime,
		constraint Edw_poschannel_pk primary key(Channelsk)
	)

	select count(*) PreCount from EDW.DimPosChannel
	select count(*) PostCount  from EDW.DimPosChannel


	
		
	---diMVendor

	Use OSOLAOLTP

	select  * from Vendor

	select v.VendorID,v.VendorNo, upper(v.LastName)+','+v.FirstName Vendor,
	v.RegistrationNo,v.VendorAddress,c.CityName,s.State from Vendor v
	inner join city c on v.CityID=c.CityID
	inner join state s on c.StateID=s.StateID
	

	select count(*)SourceCount from Vendor v
	inner join city c on v.CityID=c.CityID
	inner join state s on c.StateID=s.StateID



	--Vendor staging----

	use OSOLAStaging



	Create table stg.DimVendor
	(
		VendorID int,
		VendorNo nvarchar(50),
		Vendor nvarchar(255),
		RegistrationNo nvarchar(50),
		VendorAdress nvarchar(255),
		CityName nvarchar(55),
		State nvarchar(55),
		LoadDate Datetime	default getdate(),
		Constraint stg_vendor_pk primary key(VendorID)
	)

	truncate table stg.DimVendor

	select count(*) DesCount  from stg.DimVendor


	-- Vendor EDW

	Use OSOLAStaging

	select  VendorNo,VendorID,Vendor,VendorAdress,CityName,State from  stg.DimVendor

	select count(*) CurrentCount  from stg.DimVendor

	Use JULY2023edw

	create table EDW.DimVendor
	(
		Vendorsk int identity(1,1),
		VendorID int,
		VendorNo nvarchar(50),
		Vendor nvarchar(255),
		RegistrationNo nvarchar(50),
		VendorAdress nvarchar(255),
		CityName nvarchar(55),
		State nvarchar(55),
		EffectiveStartdate datetime ,
		EffectiveEndDate datetime,
		constraint Edw_vendor_pk primary key(Vendorsk)
	)

	select count(*) PreCount from EDW.DimVendor
	select count(*) PostCount  from EDW.DimVendor

	
	---diMEmployee

	Use OSOLAOLTP

	select  * from Employee
	select * from MaritalStatus

	select e.EmployeeID,e.EmployeeNo, upper(e.FirstName)+','+e.LastName  Employee,e.DoB,m.MaritalStatus from Employee e
	inner join MaritalStatus m on e.MaritalStatus=m.MaritalStatusID

	
	select Count(*) SourceCount from Employee e
	inner join MaritalStatus m on e.MaritalStatus=m.MaritalStatusID



	--Employee staging----

	use OSOLAStaging



	Create table stg.DimEmployee
	(
		EmployeeID int,
		EmployeeNo nvarchar(50),
		Employee nvarchar(255),
		DoB date,
		MaritalStatus nvarchar(255),
		LoadDate Datetime	default getdate(),
		Constraint stg_employee_pk primary key(EmployeeID)
	)

	truncate table stg.DimEmployee

	select count(*) DesCount  from stg.DimEmployee


	-- Employee EDW

	Use OSOLAStaging

	select EmployeeID,EmployeeNo,Employee,DoB,MaritalStatus  from  stg.DimEmployee

	select count(*) CurrentCount  from stg.DimEmployee

	Use JULY2023edw

	create table EDW.DimEmployee
	(
		Employeesk int identity(1,1),
		EmployeeID int,
		EmployeeNo nvarchar(50),
		Employee nvarchar(255),
		DoB date,
		MaritalStatus nvarchar(255),
		EffectiveStartdate datetime ,
		EffectiveEndDate datetime,
		constraint Edw_employee_pk primary key(Employeesk)
	)

	select count(*) PreCount from EDW.DimEmployee
	select count(*) PostCount  from EDW.DimEmployee



	---Misconduct Dim
	--source count will be read from the csv using our integration tool

	use OSOLAStaging

	Create Table stg.DimMisconduct
	(
		Misconductid int,
		MisconductDesc nvarchar(255),
		Loaddate datetime default getdate()
	)

	Select count(*) DesCount from stg.DimMisconduct

	Truncate table stg.DimMisconduct

	---MisConduct EDW
	Select Misconductid,MisconductDesc from stg.DimMisconduct
	group by Misconductid,MisconductDesc

	select count(*) as CurrentCount from
	(
	Select Misconductid,MisconductDesc from stg.DimMisconduct
	group by Misconductid,MisconductDesc
	) a



	Create Table EDW.DimMisconduct
	(
		Misconductsk int identity(1,1),
		misconductid int,
		misconductdesc nvarchar(255),
		Effectivestartdate datetime,
		constraint Edw_Misconduct_pk primary key(Misconductsk)
	)

	
	select count(*) PreCount from EDW.DimMisconduct
	select count(*) PostCount  from EDW.DimMisconduct


	
	---Descision Dim
	--source count will be read from the csv using our integration tool

	use OSOLAStaging
	drop table stg.DimDescision
	Create Table stg.DimDescision
	(
		Decisionid int,
		Decision nvarchar(255),
		Loaddate datetime default getdate()
	)

	Select *  from stg.DimDecision

	Truncate table stg.DimDecision

	---Deciscion EDW
	Select Decisionid,Decision from stg.DimDescision
	group by  Decisionid,Decision

	select count(*) as CurrentCount from
	(
	Select Decisionid,Decision from stg.DimDescision
	group by  Decisionid,Decision
	) a

	use JULY2023edw

	Create Table EDW.DimDecision
	(
		Decisionsk int identity(1,1),
		Decisionid int,
		Decision nvarchar(255),
		Effectivestartdate datetime,
		constraint Edw_Decision_pk primary key(Decisionsk)
	)

	
	select count(*) PreCount from EDW.DimDescision
	select count(*) PostCount  from EDW.DimDescision

	--Absence Dim
	--source count will be read from the csv using our integration tool

	use OSOLAStaging

	Create Table stg.DimAbsence
	(
		Categoryid int,
		Category nvarchar(255),
		Loaddate datetime default getdate()
	)

	Select count(*) DesCount from stg.DimAbsence

	Truncate table stg.DimAbsence

	---Absence EDW
	Select Categoryid,Category from stg.DimAbsence
	group by  Categoryid,Category

	select count(*) as CurrentCount from
	(
	Select Categoryid,Category from stg.DimAbsence
	group by  Categoryid,Category
	) a

	use JULY2023edw

	Create Table EDW.DimAbsence
	(
		Categorysk int identity(1,1),
		Categoryid int,
		Category nvarchar(255),
		Effectivestartdate datetime,
		constraint Edw_Absence_pk primary key(Categorysk)
	)

	
	select count(*) PreCount from EDW.DimAbsence
	select count(*) PostCount  from EDW.DimAbsence

	---Seles Analysis Fact
	Use OsolaOLtp

	select min(transdate),max(transdate) from Salestransaction -- shift by 3 years
	select min(transdate),max(transdate) from PurchaseTransaction --- shift by 3 year

	update SalesTransaction
	Set
	TransDate= DATEADD(Year,3,TransDate),
	OrderDate= DATEADD(Year,3,OrderDate),
	DeliveryDate= DATEADD(Year,3,DeliveryDate)

	update PurchaseTransaction
	Set
	TransDate= DATEADD(Year,3,TransDate),
	OrderDate= DATEADD(Year,3,OrderDate),
	DeliveryDate= DATEADD(Year,3,DeliveryDate),
	ShipDate= DATEADD(Year,3,ShipDate)


	select * from SalesTransaction
	select * from PurchaseTransaction
 
 ---SalesAnalysis Staging

	initial_Load  -- from  inception till N-1
	incremental_load--- N-1   .We are asumming the process runs everyday without interruption


	declare @PackageID int = ?


	IF  (Select Count(*) from JULY2023edw.edw.Factsalesanalysis) <= 0

	Select  s.TransactionID,s.TransactionNO, convert(date,s.TransDate) TransDate, Datepart(hour,s.TransDate) TransHour,convert(date,s.OrderDate) OrderDate,
	convert(date,s.DeliveryDate) DeliveryDate,s.ChannelID,s.CustomerID,s.EmployeeID,s.ProductID,s.StoreID,s.PromotionID,
	s.Quantity,s.TaxAmount,s.LineAmount,s.LineDiscountAmount
	from SalesTransaction s where convert(date,s.TransDate) <= Dateadd(day,-1,convert(date,getdate()))

	ELSE

	Select  s.TransactionID,s.TransactionNO, convert(date,s.TransDate) TransDate, Datepart(hour,s.TransDate) TransHour,convert(date,s.OrderDate) OrderDate,
	convert(date,s.DeliveryDate) DeliveryDate,s.ChannelID,s.CustomerID,s.EmployeeID,s.ProductID,s.StoreID,s.PromotionID,
	s.Quantity,s.TaxAmount,s.LineAmount,s.LineDiscountAmount
	from SalesTransaction s where convert(date,s.TransDate) between (select convert(date,LastRundate) LastRundate from JULY2023Control.ctl.Package
	where packageID=@PackageID) and Dateadd(day,-1,convert(date,getdate()))

	declare @PackageID int = ?
IF  (Select Count(*) from JULY2023edw.edw.Factsalesanalysis) <= 0

	Select  count(*) SourceCount
	from SalesTransaction s where convert(date,s.TransDate) <= Dateadd(day,-1,convert(date,getdate()))

	ELSE

	Select  count(*) SourceCount
	from SalesTransaction s where convert(date,s.TransDate) between (select convert(date,LastRundate) LastRundate from JULY2023Control.ctl.Package
	where packageID=@PackageID) and Dateadd(day,-1,convert(date,getdate()))

	use OSOLAStaging

	Create table stg.FactSalesAnalysis
	(
		TransactionID int,
		TransactionNo nvarchar(50),
		TransDate  date,
		TransHour int,
		OrderDate date,
		DeliveryDate date,
		ChannelID int,
		CustomerID int,
		EmployeeID int,
		ProductID int,
		StoreID int,
		PromotionID int,
		Quantity float,
		TaxAmount float,
		LineAmount float,
		LineDiscountAmount float,
		LoadDate datetime default getdate(),
		constraint stg_factsalesAnalysis_pk primary key(TransactionID)
	)

	select count(*) DesCount from stg.FactSalesAnalysis

	truncate table stg.FactSalesAnalysis

	--EDW Sales Analysis
	select TransactionID,TransactionNo,TransDate,TransHour,OrderDate,DeliveryDate,ChannelID,CustomerID,EmployeeID,ProductID,
	StoreID,PromotionID,quantity,TaxAmount,LineAmount,LineDiscountAmount,getdate() as LoadDate from stg.FactSalesAnalysis

	select count(*) CurrentCount from stg.FactSalesAnalysis



	Create Table EDW.FactSalesAnalysis
	(
		SalesSK bigint identity(1,1),
		TransactionNo nvarchar(50),
		TransDateSK int,
		TransHourSK int,
		OrderDateSK int,
		DeliveryDateSk int,
		ChannelSk int,
		CustomerSK int,
		Employeesk int,
		ProductSk int,
		StoreSk int,
		PromotionSk int,
		Quantity float,
		TaxAmount float,
		LineAmount float,
		LineDiscountAmount float,
		LoadDate Datetime default getdate(),
		constraint EDW_factsalesanalysis_pk primary key (SalesSK),
		constraint EDW_factsalesanalysis_TransDatesk foreign key(TransDateSK) references EDW.DimDate(DateSk),
		Constraint EDW_factsalesanalysis_TransHourSk foreign key(TransHourSK) references EDW.DimTime(TimeSK),
		Constraint EDW_factsalesanalysis_OrderDateSk foreign key(OrderDateSk) references EDW.DimDate(DateSk),
		Constraint EDW_factsalesanalysis_DeliveryDateSk foreign key(DeliveryDateSk) references EDW.DimDate(DateSk),
		Constraint EDW_factsalesanalysis_ChannelSk foreign key(ChannelSk) references EDW.DimPosChannel(ChannelSk),
		Constraint EDW_factsalesanalysis_CustomerSK foreign key(CustomerSK) references EDW.DimCustomer(CustomerSK),
		Constraint EDW_factsalesanalysis_Employeesk foreign key(Employeesk) references EDW.DimEmployee(EmployeeSK),
		Constraint EDW_factsalesanalysis_Productsk foreign key(Productsk) references EDW.DimProduct(ProductSK),
		Constraint EDW_factsalesanalysis_StoreSk foreign key(StoreSk) references EDW.DimStore(StoreSK),
		Constraint EDW_factsalesanalysis_PromotionSk foreign key(PromotionSk) references EDW.DimPromotion(PromotionSk),
	)

	select Count(*) PreCount FROM EDW.FactSalesAnalysis
	select Count(*) PostCount FROM EDW.FactSalesAnalysis

	select * from EDW.DimPosChannel


	---FactPurchaseAnalyis  -- Assignment

	---FactOvertimeAnalysis
	---source count will handled by ETL

	use OSOLAStaging

	Create Table stg.overtime
	(
		OvertimeID int,
		EmployeeNo nvarchar(50),
		FirstName nvarchar(50),
		LastName nvarchar(50),
		StartOvertime datetime,
		EndOvertime datetime,
		LoadDate datetime default getdate()
	)
	  select count(*) DesCount from Stg.overtime
	  Truncate table Stg.overtime


	  ---staging to EDW


	  select OvertimeID,EmployeeNo, convert(date,StartOvertime) StartOvertimeDate, Datepart(hour,StartOvertime) StartOvertimeHour,
	  convert(date,EndOvertime) EndOvertimeDate, Datepart(hour,EndOvertime) EndOvertimeHour,
	  Datediff(minute,StartOvertime,EndOvertime)/60  OvertimeHour
	  from
	  (
	  Select OvertimeID,EmployeeNo,FirstName,LastName,StartOvertime,EndOvertime from stg.overtime
	  group by OvertimeID,EmployeeNo,FirstName,LastName,StartOvertime,EndOvertime
	  ) a

	  select count(*) CurrentCount
	  from
	  (
	  Select OvertimeID,EmployeeNo,FirstName,LastName,StartOvertime,EndOvertime from stg.overtime
	  group by OvertimeID,EmployeeNo,FirstName,LastName,StartOvertime,EndOvertime
	  ) a

	  use JULY2023edw

	  Create table EDW.factOverTimeAnalysis
	  (
		OvertimeSK bigint identity(1,1),
		OvertimeID int,
		Employeesk int,
		StartDateSK int,
		StartHourSk int,
		EndDateSK int,
		EndHourSk int,
		OvertimeHour float,
		LoadDate datetime default getdate(),
		Constraint edw_factovertime_pk primary key(Overtimesk),
		Constraint edw_factovertime_Employeesk foreign key(Employeesk) references EDW.DimEmployee(employeesk),
		Constraint edw_factovertime_StartDateSK foreign key(StartDateSK) references EDW.DimDate(DateSk),
		Constraint edw_factovertime_StartHourSk foreign key(StartHourSk) references EDW.DimTime(TimeSk),
		Constraint edw_factovertime_EndDateSK foreign key(EndDateSK) references EDW.DimDate(DateSk),
		Constraint edw_factovertime_EndHourSk foreign key(EndHourSk) references EDW.DimTime(TimeSk),
	  )
		select Count(*) EdwCount FROM EDW.factOverTimeAnalysis
		select Count(*) PreCount FROM EDW.factOverTimeAnalysis
		select Count(*) PostCount FROM EDW.factOverTimeAnalysis

	  ---FactAbsenceAnalysis
	---source count will handled by ETL

	use OSOLAStaging

	Create table stg.AbsenceAnalysis
	(
		Absentsk int identity(1,1),
		EmpID int,
		StoreID int,
		AbsentDate date,
		AbsentHours int,
		AbsentCategoryID int,
		LoadDate datetime default getdate(),
		constraint staging_absencePK primary key (Absentsk)
	)

	Select count(*) DesCount from stg.AbsenceAnalysis
	Truncate Table stg.AbsenceAnalysis


	---EDW FactAbsenceAnalysis


	select Absentsk,EMpid,storeid,AbsentDate,AbsentHours,AbsentCategoryID
	from
	(
	select Min(Absentsk) Absentsk,EmpID,StoreID,AbsentDate,AbsentHours,AbsentCategoryID  from stg.AbsenceAnalysis+
	group by Absentsk,EmpID,StoreID,AbsentDate,AbsentHours,AbsentCategoryID
	) a

	select Count(*) CurrentCOunt
	from
	(
	select Min(Absentsk) Absentsk,EmpID,StoreID,AbsentDate,AbsentHours,AbsentCategoryID  from stg.AbsenceAnalysis+
	group by Absentsk,EmpID,StoreID,AbsentDate,AbsentHours,AbsentCategoryID
	) a

	Use JULY2023edw 

	Create table edw.factAbsenceAnalysis
	(
		Absentsk bigint identity(1,1),
		EmployeeSk int,
		StoreSK int,
		AbsentDateSk int,
		AbsentCategorysk int,
		AbsentHours int,
		LoadDate datetime default getdate(),
		Constraint edw_factabsenceanalysis_pk primary key(Absentsk),
		Constraint edw_factabsenceanalysis_Employeesk foreign key(Employeesk) references EDW.DimEmployee(employeesk),
		Constraint edw_factabsenceanalysis_Storesk foreign key(Storesk) references EDW.DimStore(Storesk),
		Constraint edw_factabsenceanalysis_AbsentDateSk foreign key(AbsentDateSk) references EDW.DimDate(Datesk),
		Constraint edw_factabsenceanalysis_AbsentCategorysk foreign key(AbsentCategorysk) references EDW.DimAbsence(Categorysk),
	)

		select Count(*) PreCount FROM edw.factAbsenceAnalysis
		select Count(*) PostCount FROM edw.factAbsenceAnalysis

-----------------------------------------------------------
-----------------------------------------------------------
-----------------------------------------------------------
-----------------------------------------------------------

	---PurchaseAnalysisFact

	declare @packageID int = ?
	IF  (Select Count(*) from JULY2023edw.Edw.Factpurchaseanalysis) <= 0

	Select  p.TransactionID,p.TransactionNO, convert(date,p.TransDate) TransDate,convert(date,p.OrderDate) OrderDate,
	convert(date,p.DeliveryDate) DeliveryDate, convert(date,p.ShipDate) ShipDate, p.vendorID,p.EmployeeID,p.ProductID,p.StoreID,
	datediff(day,p.orderdate,p.deliverydate)+1 as DifferentialDays,p.Quantity,p.TaxAmount,p.LineAmount
	from purchaseTransaction p where Transdate <= Dateadd(day,-1,getdate())

	ELSE

	select p.TransactionID,p.TransactionNO, convert(date,p.TransDate) TransDate,convert(date,p.OrderDate) OrderDate,
	convert(date,p.DeliveryDate) DeliveryDate, convert(date,p.ShipDate) ShipDate, p.vendorID,p.EmployeeID,p.ProductID,p.StoreID,
	datediff(day,p.orderdate,p.deliverydate)+1 as DifferentialDays,p.Quantity,p.TaxAmount,p.LineAmount
	from purchaseTransaction p where convert(date,p.TransDate) between (select convert(date,LastRundate) LastRundate from JULY2023Control.ctl.Package
	where packageID=@packageID) and Dateadd(day,-1,getdate())

	IF  (Select Count(*) from JULY2023edw.Edw.Factpurchaseanalysis) <= 0

	Select  count(*) SourceCount
	from purchaseTransaction p where Transdate <= Dateadd(day,-1,getdate())

	ELSE

	select count(*) SourceCount
	from purchaseTransaction p where Transdate = Dateadd(day,-1,getdate())


	---PurchaseAnalysis Staging
	select * from PurchaseTransaction

	use OSOLAStaging
	Create table stg.FactPurchaseAnalysis
	(
		TransactionID int,
		TransactionNo nvarchar(50),
		TransDate  date,
		OrderDate date,
		DeliveryDate date,
		shipDate date,
		vendorID int,
		EmployeeID int,
		ProductID int,
		StoreID int,
		DifferentialDays int,
		Quantity float,
		TaxAmount float,
		LineAmount float,
		LoadDate datetime default getdate(),
		constraint stg_factpurchaseAnalysis_pk primary key(TransactionID)
	)

	select count(*) DesCount from stg.FactPurchaseAnalysis

	truncate table stg.FactPurchaseAnalysis

	--EDW Purchase Analysis
	select TransactionID, TransactionNo, TransDate,OrderDate,DeliveryDate,shipDate,vendorID,EmployeeID,ProductID, 
	StoreID,DifferentialDays,Quantity,TaxAmount, LineAmount,getdate() as LoadDate from stg.FactPurchaseAnalysis 

	select count(*) CurrentCount from stg.FactPurchaseAnalysis


	
	Create Table EDW.FactPurchaseAnalysis
	(
		PurchaseSK bigint identity(1,1),
		TransactionNo nvarchar(50),
		TransDateSK int,
		OrderDateSK int,
		DeliveryDateSk int,
		shipDateSK int,
		vendorSK int,
		Employeesk int,
		ProductSk int,
		StoreSk int,
		DifferentialDays int,
		Quantity float,
		TaxAmount float,
		LineAmount float,
		LoadDate Datetime default getdate(),
		constraint EDW_factpurchaseanalysis_pk primary key (PurchaseSK),
		constraint EDW_factpurchaseanalysis_TransDatesk foreign key(TransDateSK) references EDW.DimDate(DateSk),
		Constraint EDW_factpurchaseanalysis_OrderDateSk foreign key(OrderDateSk) references EDW.DimDate(DateSk),
		Constraint EDW_factpurchaseanalysis_DeliveryDateSk foreign key(DeliveryDateSk) references EDW.DimDate(DateSk),
		Constraint EDW_factpurchaseanalysis_ShipDateSk foreign key(ShipDateSk) references EDW.DimDate(DateSk),
		Constraint EDW_factpurchaseanalysis_Employeesk foreign key(Employeesk) references EDW.DimEmployee(EmployeeSK),
		Constraint EDW_factpurchaseanalysis_vendorsk foreign key(vendorsk) references EDW.Dimvendor(vendorSK),
		Constraint EDW_factpurchaseanalysis_Productsk foreign key(Productsk) references EDW.DimProduct(ProductSK),
		Constraint EDW_factpurchaseanalysis_StoreSk foreign key(StoreSk) references EDW.DimStore(StoreSK),
		)

	select Count(*) PreCount FROM EDW.FactPurchaseAnalysis
	select Count(*) PreCount FROM EDW.FactPurchaseAnalysis




	  ---FactMisconductAnalysis
	---source count will handled by ETL

	use OSOLAStaging

	Create table stg.MisconductAnalysis
	(
		Misconductsk int identity(1,1),
		EmpID int,
		StoreID int,
		MisconductDate date,
		MisconductID int,
		DecisionID int,
		LoadDate datetime default getdate(),
		constraint staging_MisconductPK primary key (Misconductsk)
	)

	Select count(*) DesCount from stg.MisconductAnalysis
	Truncate Table stg.MisconductAnalysis


	---EDW FactMisconductAnalysis


	select Misconductsk,EmpID,storeid,MisconductDate,MisconductID, decisionID
	from
	(
	select Max(Misconductsk) Misconductsk,EmpID,StoreID,MisconductDate,MisconductID,DecisionID  from stg.MisconductAnalysis
	group by Misconductsk,EmpID,StoreID,MisconductDate,MisconductID,DecisionID
	) a

	select Count(*) CurrentCount
	from
	(
	select Max(Misconductsk) Misconductsk,EmpID,StoreID,MisconductDate,MisconductID,DecisionID  from stg.MisconductAnalysis
	group by Misconductsk,EmpID,StoreID,MisconductDate,MisconductID,DecisionID
	) a

	Use JULY2023edw 
	
	Create table edw.factMisconductAnalysis
	(
		Misconductsk bigint identity(1,1),
		EmployeeSk int,
		StoreSK int,
		MisconductDateSk int,
		DecisionSK int,
		misconductTypeIDsk int,
		LoadDate datetime default getdate(),
		Constraint edw_factMisconductanalysis_pk primary key(Misconductsk),
		Constraint edw_factMisconductanalysis_Employeesk foreign key(Employeesk) references EDW.DimEmployee(employeesk),
		Constraint edw_factMisconductanalysis_Storesk foreign key(Storesk) references EDW.DimStore(Storesk),
		Constraint edw_factMisconductanalysis_MisconductDateSk foreign key(MisconductDateSk) references EDW.DimDate(Datesk),
		Constraint edw_factMisconductanalysis_Decisionsk foreign key(Decisionsk) references EDW.DimDecision(Decisionsk),
		Constraint edw_factMisconductanalysis_misconductIDsk foreign key(misconductTypeIDsk) references EDW.DimMisconduct(Misconductsk)
	)
		select Count(*) EdwCount FROM edw.factMisconductAnalysis
		select Count(*) PreCount FROM edw.factMisconductAnalysis
		select Count(*) PostCount FROM edw.factMisconductAnalysis

	select * from edw.dimMisconduct-----PurchaseAnalysisFact

----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------
-----------------------------------------------------------
-----------------------------------------------------------
-----------------------------------------------------------

